
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSTATELISTleftDECLLISTleftCONDLISTleftIFleftELSEleftOPERATORleftPLUSMINUSleftTIMESDIVnonassocUMINUSAND BEGIN BOOLEAN CALL CHAR COLON COMMA CONST DIV DO DOUBLE ELSE END EQUALS FLOAT FOR IDENTIFIER IF IN INTEGER LBRAKET LPAREN MINUS NOT NUMBER OPERATOR OR OUT PLUS PRINT PROCEDURE RBRAKET READ RETURN RPAREN SEMI STRING STRINGTYPE THEN TIMES TO VARprogram : const_repeat var_repeat ex_procedure BEGIN circular_statement END SEMIex_procedure : circular_procedure\n                            | circular_procedure : procedure %prec DECLLIST\n                          | circular_procedure procedurecircular_statement : statement %prec STATELIST\n                          | circular_statement statementprocedure : PROCEDURE IDENTIFIER LPAREN circular_format RPAREN COLON blockblock : BEGIN const_repeat var_repeat optional_statement END SEMIoptional_statement : statement\n                          |  const_repeat : circular_const %prec DECLLIST\n                    |\n        circular_const : CONST const_decl\n                    | circular_const CONST const_declvar_repeat : circular_var %prec DECLLIST\n                  |\n        circular_var : VAR var_decl\n                  | circular_var VAR var_declvar_decl : circular_id COLON type SEMIconst_decl : circular_id EQUALS NUMBER SEMIcircular_format : format\n                       | circular_format COLON format\n                       |  format : circular_id COLON mode typecircular_id : IDENTIFIER\n                   | circular_id COMMA IDENTIFIERtype : INTEGER\n            | STRINGTYPE\n            | CHAR\n            | FLOAT\n            | DOUBLE\n            | BOOLEANmode : IN\n            | OUT\n            | IN OUT\n            |  statement : print\n                 | asgn\n                 | read\n                 | return\n                 | call\n                 | cond\n                 | forcond : IF bool THEN statement %prec IF\n            | IF bool THEN statement ELSE statementbool : NOT bool %prec CONDLIST\n            | bool AND bool %prec CONDLIST\n            | bool OR bool %prec CONDLIST\n            | LPAREN bool RPAREN\n            | expr OPERATOR exprfor : FOR IDENTIFIER EQUALS expr TO expr DO statementcall : CALL IDENTIFIER LPAREN args RPAREN SEMIargs : expr\n            | args COMMA expr\n            |  return : RETURN SEMIread : READ LPAREN var_value RPAREN SEMIvar_value : var\n                 | STRING\n                 | var_value COMMA varvalue : expr\n             | STRING\n             | value COMMA exprprint : PRINT LPAREN value RPAREN SEMIasgn : var EQUALS expr SEMIexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n          | expr DIV exprexpr : MINUS expr %prec UMINUSexpr : NUMBER\n            | varexpr : LPAREN expr RPARENvar : IDENTIFIER braketbraket : braket LBRAKET expr RBRAKET\n              |  '
    
_lr_action_items = {'VAR':([0,2,3,6,9,17,19,25,54,74,137,144,],[-13,7,-12,16,-14,-18,-15,-19,-21,-20,-13,7,]),'PROCEDURE':([0,2,3,5,6,9,13,14,17,19,23,25,54,74,136,151,],[-13,-17,-12,15,-16,-14,15,-4,-18,-15,-5,-19,-21,-20,-8,-9,]),'BEGIN':([0,2,3,5,6,9,12,13,14,17,19,23,25,54,74,122,136,151,],[-13,-17,-12,-3,-16,-14,22,-2,-4,-18,-15,-5,-19,-21,-20,137,-8,-9,]),'CONST':([0,3,9,19,54,137,],[4,8,-14,-15,-21,4,]),'$end':([1,75,],[0,-1,]),'PRINT':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,38,-19,38,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,38,-66,-45,-65,-58,38,-13,-53,-46,-17,38,38,-52,]),'READ':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,40,-19,40,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,40,-66,-45,-65,-58,40,-13,-53,-46,-17,40,40,-52,]),'RETURN':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,41,-19,41,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,41,-66,-45,-65,-58,41,-13,-53,-46,-17,41,41,-52,]),'CALL':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,42,-19,42,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,42,-66,-45,-65,-58,42,-13,-53,-46,-17,42,42,-52,]),'IF':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,44,-19,44,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,44,-66,-45,-65,-58,44,-13,-53,-46,-17,44,44,-52,]),'FOR':([3,6,9,17,19,22,25,29,30,31,32,33,34,35,36,37,54,56,60,74,86,105,111,127,129,134,137,140,142,144,145,146,147,],[-12,-16,-14,-18,-15,45,-19,45,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,45,-66,-45,-65,-58,45,-13,-53,-46,-17,45,45,-52,]),'IDENTIFIER':([3,4,6,7,8,9,15,16,17,19,21,22,25,29,30,31,32,33,34,35,36,37,42,44,45,46,54,56,57,58,59,60,64,65,67,74,76,84,85,86,87,88,92,93,94,95,96,98,100,104,105,107,111,127,129,132,134,135,137,140,142,144,145,146,147,],[-12,11,-16,11,11,-14,24,11,-18,-15,28,43,-19,43,-6,-38,-39,-40,-41,-42,-43,-44,61,43,70,11,-21,-7,43,43,43,-57,43,43,43,-20,43,43,43,43,43,43,43,43,43,43,43,43,11,43,-66,43,-45,-65,-58,43,43,43,-13,-53,-46,-17,43,43,-52,]),'END':([3,6,9,17,19,25,29,30,31,32,33,34,35,36,37,54,56,60,74,105,111,127,129,137,140,142,144,146,147,148,149,],[-12,-16,-14,-18,-15,-19,55,-6,-38,-39,-40,-41,-42,-43,-44,-21,-7,-57,-20,-66,-45,-65,-58,-13,-53,-46,-17,-11,-52,150,-10,]),'EQUALS':([10,11,28,39,43,62,70,133,],[20,-26,-27,58,-77,-75,98,-76,]),'COMMA':([10,11,18,28,43,62,68,69,73,77,78,79,81,82,83,84,97,108,109,115,117,118,119,120,128,130,133,141,],[21,-26,21,-27,-77,-75,-72,-73,21,104,-62,-63,107,-59,-60,-56,-71,132,-54,-74,-67,-68,-69,-70,-64,-61,-76,-55,]),'COLON':([11,18,28,46,48,49,50,51,52,53,71,72,73,99,123,138,],[-26,26,-27,-24,-28,-29,-30,-31,-32,-33,100,-22,101,122,-23,-25,]),'NUMBER':([20,44,57,58,64,65,67,76,84,85,87,88,92,93,94,95,96,98,104,132,135,],[27,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'LPAREN':([24,38,40,44,57,58,61,64,65,67,76,84,85,87,88,92,93,94,95,96,98,104,132,135,],[46,57,59,65,76,76,84,65,65,76,76,76,76,65,65,76,76,76,76,76,76,76,76,76,]),'INTEGER':([26,101,124,125,126,139,],[48,-37,48,-34,-35,-36,]),'STRINGTYPE':([26,101,124,125,126,139,],[49,-37,49,-34,-35,-36,]),'CHAR':([26,101,124,125,126,139,],[50,-37,50,-34,-35,-36,]),'FLOAT':([26,101,124,125,126,139,],[51,-37,51,-34,-35,-36,]),'DOUBLE':([26,101,124,125,126,139,],[52,-37,52,-34,-35,-36,]),'BOOLEAN':([26,101,124,125,126,139,],[53,-37,53,-34,-35,-36,]),'SEMI':([27,41,43,47,48,49,50,51,52,53,55,62,68,69,80,97,103,106,115,117,118,119,120,131,133,150,],[54,60,-77,74,-28,-29,-30,-31,-32,-33,75,-75,-72,-73,105,-71,127,129,-74,-67,-68,-69,-70,140,-76,151,]),'ELSE':([31,32,33,34,35,36,37,60,105,111,127,129,140,142,147,],[-38,-39,-40,-41,-42,-43,-44,-57,-66,134,-65,-58,-53,-46,-52,]),'LBRAKET':([43,62,133,],[-77,85,-76,]),'OPERATOR':([43,62,66,68,69,91,97,115,117,118,119,120,133,],[-77,-75,92,-72,-73,92,-71,-74,-67,-68,-69,-70,-76,]),'PLUS':([43,62,66,68,69,78,80,91,97,102,109,110,115,116,117,118,119,120,121,128,133,141,143,],[-77,-75,93,-72,-73,93,93,93,-71,93,93,93,-74,93,-67,-68,-69,-70,93,93,-76,93,93,]),'MINUS':([43,44,57,58,62,64,65,66,67,68,69,76,78,80,84,85,87,88,91,92,93,94,95,96,97,98,102,104,109,110,115,116,117,118,119,120,121,128,132,133,135,141,143,],[-77,67,67,67,-75,67,67,94,67,-72,-73,67,94,94,67,67,67,67,94,67,67,67,67,67,-71,67,94,67,94,94,-74,94,-67,-68,-69,-70,94,94,67,-76,67,94,94,]),'TIMES':([43,62,66,68,69,78,80,91,97,102,109,110,115,116,117,118,119,120,121,128,133,141,143,],[-77,-75,95,-72,-73,95,95,95,-71,95,95,95,-74,95,95,95,-69,-70,95,95,-76,95,95,]),'DIV':([43,62,66,68,69,78,80,91,97,102,109,110,115,116,117,118,119,120,121,128,133,141,143,],[-77,-75,96,-72,-73,96,96,96,-71,96,96,96,-74,96,96,96,-69,-70,96,96,-76,96,96,]),'RPAREN':([43,46,48,49,50,51,52,53,62,68,69,71,72,77,78,79,81,82,83,84,89,90,91,97,102,108,109,112,113,114,115,116,117,118,119,120,123,128,130,133,138,141,],[-77,-24,-28,-29,-30,-31,-32,-33,-75,-72,-73,99,-22,103,-62,-63,106,-59,-60,-56,-47,114,115,-71,115,131,-54,-48,-49,-50,-74,-51,-67,-68,-69,-70,-23,-64,-61,-76,-25,-55,]),'RBRAKET':([43,62,68,69,97,110,115,117,118,119,120,133,],[-77,-75,-72,-73,-71,133,-74,-67,-68,-69,-70,-76,]),'THEN':([43,62,63,68,69,89,97,112,113,114,115,116,117,118,119,120,133,],[-77,-75,86,-72,-73,-47,-71,-48,-49,-50,-74,-51,-67,-68,-69,-70,-76,]),'AND':([43,62,63,68,69,89,90,97,112,113,114,115,116,117,118,119,120,133,],[-77,-75,87,-72,-73,-47,87,-71,-48,-49,-50,-74,-51,-67,-68,-69,-70,-76,]),'OR':([43,62,63,68,69,89,90,97,112,113,114,115,116,117,118,119,120,133,],[-77,-75,88,-72,-73,-47,88,-71,-48,-49,-50,-74,-51,-67,-68,-69,-70,-76,]),'TO':([43,62,68,69,97,115,117,118,119,120,121,133,],[-77,-75,-72,-73,-71,-74,-67,-68,-69,-70,135,-76,]),'DO':([43,62,68,69,97,115,117,118,119,120,133,143,],[-77,-75,-72,-73,-71,-74,-67,-68,-69,-70,-76,145,]),'NOT':([44,64,65,87,88,],[64,64,64,64,64,]),'STRING':([57,59,],[79,83,]),'IN':([101,],[125,]),'OUT':([101,125,],[126,139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'const_repeat':([0,137,],[2,144,]),'circular_const':([0,137,],[3,3,]),'var_repeat':([2,144,],[5,146,]),'circular_var':([2,144,],[6,6,]),'const_decl':([4,8,],[9,19,]),'circular_id':([4,7,8,16,46,100,],[10,18,10,18,73,73,]),'ex_procedure':([5,],[12,]),'circular_procedure':([5,],[13,]),'procedure':([5,13,],[14,23,]),'var_decl':([7,16,],[17,25,]),'circular_statement':([22,],[29,]),'statement':([22,29,86,134,145,146,],[30,56,111,142,147,149,]),'print':([22,29,86,134,145,146,],[31,31,31,31,31,31,]),'asgn':([22,29,86,134,145,146,],[32,32,32,32,32,32,]),'read':([22,29,86,134,145,146,],[33,33,33,33,33,33,]),'return':([22,29,86,134,145,146,],[34,34,34,34,34,34,]),'call':([22,29,86,134,145,146,],[35,35,35,35,35,35,]),'cond':([22,29,86,134,145,146,],[36,36,36,36,36,36,]),'for':([22,29,86,134,145,146,],[37,37,37,37,37,37,]),'var':([22,29,44,57,58,59,64,65,67,76,84,85,86,87,88,92,93,94,95,96,98,104,107,132,134,135,145,146,],[39,39,69,69,69,82,69,69,69,69,69,69,39,69,69,69,69,69,69,69,69,69,130,69,39,69,39,39,]),'type':([26,124,],[47,138,]),'braket':([43,],[62,]),'bool':([44,64,65,87,88,],[63,89,90,112,113,]),'expr':([44,57,58,64,65,67,76,84,85,87,88,92,93,94,95,96,98,104,132,135,],[66,78,80,66,91,97,102,109,110,66,66,116,117,118,119,120,121,128,141,143,]),'circular_format':([46,],[71,]),'format':([46,100,],[72,123,]),'value':([57,],[77,]),'var_value':([59,],[81,]),'args':([84,],[108,]),'mode':([101,],[124,]),'block':([122,],[136,]),'optional_statement':([146,],[148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> const_repeat var_repeat ex_procedure BEGIN circular_statement END SEMI','program',7,'p_program','MainParser.py',119),
  ('ex_procedure -> circular_procedure','ex_procedure',1,'p_ex_procedure','MainParser.py',122),
  ('ex_procedure -> <empty>','ex_procedure',0,'p_ex_procedure','MainParser.py',123),
  ('circular_procedure -> procedure','circular_procedure',1,'p_circular_procedure','MainParser.py',126),
  ('circular_procedure -> circular_procedure procedure','circular_procedure',2,'p_circular_procedure','MainParser.py',127),
  ('circular_statement -> statement','circular_statement',1,'p_circular_statement','MainParser.py',130),
  ('circular_statement -> circular_statement statement','circular_statement',2,'p_circular_statement','MainParser.py',131),
  ('procedure -> PROCEDURE IDENTIFIER LPAREN circular_format RPAREN COLON block','procedure',7,'p_procedure','MainParser.py',134),
  ('block -> BEGIN const_repeat var_repeat optional_statement END SEMI','block',6,'p_block','MainParser.py',137),
  ('optional_statement -> statement','optional_statement',1,'p_optional_statement','MainParser.py',140),
  ('optional_statement -> <empty>','optional_statement',0,'p_optional_statement','MainParser.py',141),
  ('const_repeat -> circular_const','const_repeat',1,'p_const_repeat','MainParser.py',144),
  ('const_repeat -> <empty>','const_repeat',0,'p_const_repeat','MainParser.py',145),
  ('circular_const -> CONST const_decl','circular_const',2,'p_const_repeat','MainParser.py',146),
  ('circular_const -> circular_const CONST const_decl','circular_const',3,'p_const_repeat','MainParser.py',147),
  ('var_repeat -> circular_var','var_repeat',1,'p_var_repeat','MainParser.py',150),
  ('var_repeat -> <empty>','var_repeat',0,'p_var_repeat','MainParser.py',151),
  ('circular_var -> VAR var_decl','circular_var',2,'p_var_repeat','MainParser.py',152),
  ('circular_var -> circular_var VAR var_decl','circular_var',3,'p_var_repeat','MainParser.py',153),
  ('var_decl -> circular_id COLON type SEMI','var_decl',4,'p_var_decl','MainParser.py',156),
  ('const_decl -> circular_id EQUALS NUMBER SEMI','const_decl',4,'p_const_decl','MainParser.py',159),
  ('circular_format -> format','circular_format',1,'p_circular_format','MainParser.py',162),
  ('circular_format -> circular_format COLON format','circular_format',3,'p_circular_format','MainParser.py',163),
  ('circular_format -> <empty>','circular_format',0,'p_circular_format','MainParser.py',164),
  ('format -> circular_id COLON mode type','format',4,'p_format','MainParser.py',167),
  ('circular_id -> IDENTIFIER','circular_id',1,'p_circular_id','MainParser.py',170),
  ('circular_id -> circular_id COMMA IDENTIFIER','circular_id',3,'p_circular_id','MainParser.py',171),
  ('type -> INTEGER','type',1,'p_type','MainParser.py',174),
  ('type -> STRINGTYPE','type',1,'p_type','MainParser.py',175),
  ('type -> CHAR','type',1,'p_type','MainParser.py',176),
  ('type -> FLOAT','type',1,'p_type','MainParser.py',177),
  ('type -> DOUBLE','type',1,'p_type','MainParser.py',178),
  ('type -> BOOLEAN','type',1,'p_type','MainParser.py',179),
  ('mode -> IN','mode',1,'p_mode','MainParser.py',182),
  ('mode -> OUT','mode',1,'p_mode','MainParser.py',183),
  ('mode -> IN OUT','mode',2,'p_mode','MainParser.py',184),
  ('mode -> <empty>','mode',0,'p_mode','MainParser.py',185),
  ('statement -> print','statement',1,'p_statement','MainParser.py',188),
  ('statement -> asgn','statement',1,'p_statement','MainParser.py',189),
  ('statement -> read','statement',1,'p_statement','MainParser.py',190),
  ('statement -> return','statement',1,'p_statement','MainParser.py',191),
  ('statement -> call','statement',1,'p_statement','MainParser.py',192),
  ('statement -> cond','statement',1,'p_statement','MainParser.py',193),
  ('statement -> for','statement',1,'p_statement','MainParser.py',194),
  ('cond -> IF bool THEN statement','cond',4,'p_cond','MainParser.py',197),
  ('cond -> IF bool THEN statement ELSE statement','cond',6,'p_cond','MainParser.py',198),
  ('bool -> NOT bool','bool',2,'p_bool','MainParser.py',201),
  ('bool -> bool AND bool','bool',3,'p_bool','MainParser.py',202),
  ('bool -> bool OR bool','bool',3,'p_bool','MainParser.py',203),
  ('bool -> LPAREN bool RPAREN','bool',3,'p_bool','MainParser.py',204),
  ('bool -> expr OPERATOR expr','bool',3,'p_bool','MainParser.py',205),
  ('for -> FOR IDENTIFIER EQUALS expr TO expr DO statement','for',8,'p_for','MainParser.py',208),
  ('call -> CALL IDENTIFIER LPAREN args RPAREN SEMI','call',6,'p_call','MainParser.py',211),
  ('args -> expr','args',1,'p_args','MainParser.py',214),
  ('args -> args COMMA expr','args',3,'p_args','MainParser.py',215),
  ('args -> <empty>','args',0,'p_args','MainParser.py',216),
  ('return -> RETURN SEMI','return',2,'p_return','MainParser.py',219),
  ('read -> READ LPAREN var_value RPAREN SEMI','read',5,'p_read','MainParser.py',222),
  ('var_value -> var','var_value',1,'p_var_value','MainParser.py',225),
  ('var_value -> STRING','var_value',1,'p_var_value','MainParser.py',226),
  ('var_value -> var_value COMMA var','var_value',3,'p_var_value','MainParser.py',227),
  ('value -> expr','value',1,'p_value','MainParser.py',230),
  ('value -> STRING','value',1,'p_value','MainParser.py',231),
  ('value -> value COMMA expr','value',3,'p_value','MainParser.py',232),
  ('print -> PRINT LPAREN value RPAREN SEMI','print',5,'p_print','MainParser.py',239),
  ('asgn -> var EQUALS expr SEMI','asgn',4,'p_asgn','MainParser.py',243),
  ('expr -> expr PLUS expr','expr',3,'p_expr','MainParser.py',247),
  ('expr -> expr MINUS expr','expr',3,'p_expr','MainParser.py',248),
  ('expr -> expr TIMES expr','expr',3,'p_expr','MainParser.py',249),
  ('expr -> expr DIV expr','expr',3,'p_expr','MainParser.py',250),
  ('expr -> MINUS expr','expr',2,'p_expr2uminus','MainParser.py',265),
  ('expr -> NUMBER','expr',1,'p_integer_constant','MainParser.py',270),
  ('expr -> var','expr',1,'p_integer_constant','MainParser.py',271),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_parens','MainParser.py',275),
  ('var -> IDENTIFIER braket','var',2,'p_var','MainParser.py',279),
  ('braket -> braket LBRAKET expr RBRAKET','braket',4,'p_braket','MainParser.py',283),
  ('braket -> <empty>','braket',0,'p_braket','MainParser.py',284),
]
